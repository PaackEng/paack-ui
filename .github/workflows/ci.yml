name: CI
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [master]
    tags:
      - '*'

jobs:
  validate:
   runs-on: ubuntu-latest
   if: github.event.pull_request.draft == false

   steps:
     - uses: actions/checkout@v2

     - name: Get yarn cache directory path
       id: yarn-cache-dir-path
       run: echo "::set-output name=dir::$(yarn cache dir)"

     - uses: actions/cache@v2
       id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
       with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Don't forget to bump
      run: ! echo 'n' | elm bump | grep update > /dev/null

     - uses: PaackEng/elm-validate-action@v1.1.1
       with:
         elm-make-options:
         elm-review-extra-options: --ignore-dirs 'src/I18n'

     - uses: PaackEng/elm-validate-action@v1.1.1
       with:
         elm-working-directory: 'showcase'
         elm-review-extra-options: --ignore-dirs '../src'


  tests:
     runs-on: ubuntu-latest
     if: github.event.pull_request.draft == false

     steps:
       - uses: actions/checkout@v2

       - name: Get yarn cache directory path
         id: yarn-cache-dir-path
         run: echo "::set-output name=dir::$(yarn cache dir)"

       - uses: actions/cache@v2
         id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
         with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

       - name: Install dependencies
         run: yarn install

       - name: Run tests
         run: yarn run test

       - name: Build
         run: yarn run build

